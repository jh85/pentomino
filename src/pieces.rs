pub mod piece {
    use crate::board::board::*;
    use crate::polyominolist::polyominolist::*;
    
    pub fn get_num_pieces(n: usize) -> usize {
        match n {
            4 => NUM_PIECES_4,
            5 => NUM_PIECES_5,
            6 => NUM_PIECES_6,
            7 => NUM_PIECES_7,
            8 => NUM_PIECES_8,
            9 => NUM_PIECES_9,
            10 => NUM_PIECES_10,
            _ => panic!("wrong size"),
        }
    }

    pub fn get_num_pieces_3d(n: usize) -> usize {
        match n {
            4 => 8,
            5 => 29,
            6 => 166,
            7 => 1023,
            8 => 6922,
            9 => 48311,
            10 =>346543,
            _ => panic!("wrong size"),
        }
    }
    
    #[allow(dead_code)]
    fn pieces2vec<const N: usize, const K: usize>(pieces: [[[usize;N];N];K]) -> Vec<Vec<Vec<usize>>> {
        pieces.iter()
            .map(|mat| {
                mat.iter()
                    .map(|row| row.to_vec())
                    .collect::<Vec<Vec<usize>>>()
            })
            .collect::<Vec<Vec<Vec<usize>>>>()
    }

    pub fn congruent_figures_for_each_piece(n: usize) -> Vec<Vec<Vec<(usize,usize)>>> {
        let all_pieces = free_polyominos(n);
        
        let mut ret = Vec::new();
        for piece in all_pieces {
            let mut congruent_figures = Vec::new();
            let figure = Board(piece);
            for vertically in [true,false] {
                for horizontally in [true,false] {
                    for diagonally in [true,false] {
                        let normalized_figure = figure
                            .transform(vertically,horizontally,diagonally)
                            .normalize_coordinates();
                        if !congruent_figures.contains(&normalized_figure) {
                            congruent_figures.push(normalized_figure);
                        }
                    }
                }
            }
            ret.push(congruent_figures);
        }
        ret
    }

    #[allow(dead_code)]
    const NUM_PIECES_4: usize = 5;

    #[allow(dead_code)]
    const PIECES_4: [[[usize;4];4]; NUM_PIECES_4] = [
        [[1,0,0,0],
         [1,0,0,0],
         [1,0,0,0],
         [1,0,0,0]], // 0
        [[1,1,1,0],
         [0,1,0,0],
         [0,0,0,0],
         [0,0,0,0]], // 1
        [[1,1,1,0],
         [1,0,0,0],
         [0,0,0,0],
         [0,0,0,0]], // 2
        [[0,1,1,0],
         [1,1,0,0],
         [0,0,0,0],
         [0,0,0,0]], // 3
        [[1,1,0,0],
         [1,1,0,0],
         [0,0,0,0],
         [0,0,0,0]], // 4
    ];

    #[allow(dead_code)]
    const NUM_PIECES_5: usize = 12;

    #[allow(dead_code)]
    const PIECES_5: [[[usize;5];5]; NUM_PIECES_5] = [
        [[1,0,0,0,0],
         [1,0,0,0,0],
         [1,0,0,0,0],
         [1,0,0,0,0],
         [1,0,0,0,0]], // 0
        [[0,1,1,0,0],
         [1,1,0,0,0],
         [0,1,0,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 1
        [[0,1,0,0,0],
         [0,1,0,0,0],
         [0,1,0,0,0],
         [1,1,0,0,0],
         [0,0,0,0,0]], // 2
        [[1,1,0,0,0],
         [1,1,0,0,0],
         [0,1,0,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 3
        [[0,1,0,0,0],
         [0,1,0,0,0],
         [1,1,0,0,0],
         [1,0,0,0,0],
         [0,0,0,0,0]], // 4
        [[1,1,1,0,0],
         [0,1,0,0,0],
         [0,1,0,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 5
        [[1,0,1,0,0],
         [1,1,1,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 6
        [[0,0,1,0,0],
         [0,0,1,0,0],
         [1,1,1,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 7
        [[0,0,1,0,0],
         [0,1,1,0,0],
         [1,1,0,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 8
        [[0,1,0,0,0],
         [1,1,1,0,0],
         [0,1,0,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 9
        [[0,1,0,0,0],
         [1,1,0,0,0],
         [0,1,0,0,0],
         [0,1,0,0,0],
         [0,0,0,0,0]], // 10
        [[0,1,1,0,0],
         [0,1,0,0,0],
         [1,1,0,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]], // 11
    ];

    #[allow(dead_code)]
    const NUM_PIECES_6: usize = 35;

    #[allow(dead_code)]
    const PIECES_6: [[[usize;6];6]; NUM_PIECES_6] = [
        [[1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0]], // 0
        [[1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0]], // 1
        [[1,0,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0]], // 2
        [[1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0]], // 3
        [[0,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0]], // 4
        [[1,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 5
        [[1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 6
        [[1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 7
        [[1,0,0,0,0,0],
         [1,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 8
        [[1,1,1,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 9
        [[1,0,0,0,0,0],
         [1,1,1,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 10
        [[1,1,1,0,0,0],
         [0,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 11
        [[0,1,1,0,0,0],
         [1,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 12
        [[0,1,1,0,0,0],
         [0,1,0,0,0,0],
         [1,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 13
        [[0,1,1,0,0,0],
         [0,1,0,0,0,0],
         [0,1,0,0,0,0],
         [1,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 14
        [[0,1,0,0,0,0],
         [0,1,1,0,0,0],
         [1,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 15
        [[0,1,0,0,0,0],
         [1,1,1,0,0,0],
         [0,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 16
        [[0,1,0,0,0,0],
         [1,1,1,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 17
        [[0,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 18
        [[0,1,0,0,0,0],
         [0,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0]], // 19
        [[0,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 20
        [[1,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 21
        [[0,0,1,0,0,0],
         [1,1,1,0,0,0],
         [0,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 22
        [[1,1,1,0,0,0],
         [0,1,1,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 23
        [[0,0,1,0,0,0],
         [0,1,1,0,0,0],
         [1,1,0,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 24
        [[0,0,1,0,0,0],
         [1,1,1,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 25
        [[0,1,1,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 26
        [[1,1,1,0,0,0],
         [1,0,1,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 27
        [[1,0,1,0,0,0],
         [1,1,1,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 28
        [[1,0,1,0,0,0],
         [1,1,1,0,0,0],
         [0,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 29
        [[0,1,1,0,0,0],
         [0,1,0,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 30
        [[1,0,0,0,0,0],
         [1,1,0,0,0,0],
         [1,1,1,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 31
        [[0,1,0,0,0,0],
         [1,1,1,0,0,0],
         [1,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 32
        [[0,0,1,0,0,0],
         [1,1,1,0,0,0],
         [1,1,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 33
        [[0,0,1,0,0,0],
         [0,1,1,0,0,0],
         [1,1,0,0,0,0],
         [1,0,0,0,0,0],
         [0,0,0,0,0,0],
         [0,0,0,0,0,0]], // 34
    ];

    #[allow(dead_code)]
    const NUM_PIECES_7: usize = 108;
    #[allow(dead_code)]
    const NUM_PIECES_8: usize = 369;
    #[allow(dead_code)]
    const NUM_PIECES_9: usize = 1285;
    #[allow(dead_code)]
    const NUM_PIECES_10: usize = 4655;
}

